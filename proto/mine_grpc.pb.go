// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/mine.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetClient is the client API for Greet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetClient interface {
	SayHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SayHalloClientStreming(ctx context.Context, opts ...grpc.CallOption) (Greet_SayHalloClientStremingClient, error)
}

type greetClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetClient(cc grpc.ClientConnInterface) GreetClient {
	return &greetClient{cc}
}

func (c *greetClient) SayHello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mine.Greet/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetClient) SayHalloClientStreming(ctx context.Context, opts ...grpc.CallOption) (Greet_SayHalloClientStremingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greet_ServiceDesc.Streams[0], "/mine.Greet/SayHalloClientStreming", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetSayHalloClientStremingClient{stream}
	return x, nil
}

type Greet_SayHalloClientStremingClient interface {
	Send(*Request) error
	CloseAndRecv() (*NamesRes, error)
	grpc.ClientStream
}

type greetSayHalloClientStremingClient struct {
	grpc.ClientStream
}

func (x *greetSayHalloClientStremingClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetSayHalloClientStremingClient) CloseAndRecv() (*NamesRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(NamesRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServer is the server API for Greet service.
// All implementations must embed UnimplementedGreetServer
// for forward compatibility
type GreetServer interface {
	SayHello(context.Context, *Request) (*Response, error)
	SayHalloClientStreming(Greet_SayHalloClientStremingServer) error
	mustEmbedUnimplementedGreetServer()
}

// UnimplementedGreetServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServer struct {
}

func (UnimplementedGreetServer) SayHello(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreetServer) SayHalloClientStreming(Greet_SayHalloClientStremingServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHalloClientStreming not implemented")
}
func (UnimplementedGreetServer) mustEmbedUnimplementedGreetServer() {}

// UnsafeGreetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServer will
// result in compilation errors.
type UnsafeGreetServer interface {
	mustEmbedUnimplementedGreetServer()
}

func RegisterGreetServer(s grpc.ServiceRegistrar, srv GreetServer) {
	s.RegisterService(&Greet_ServiceDesc, srv)
}

func _Greet_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mine.Greet/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServer).SayHello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greet_SayHalloClientStreming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServer).SayHalloClientStreming(&greetSayHalloClientStremingServer{stream})
}

type Greet_SayHalloClientStremingServer interface {
	SendAndClose(*NamesRes) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type greetSayHalloClientStremingServer struct {
	grpc.ServerStream
}

func (x *greetSayHalloClientStremingServer) SendAndClose(m *NamesRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetSayHalloClientStremingServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greet_ServiceDesc is the grpc.ServiceDesc for Greet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mine.Greet",
	HandlerType: (*GreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greet_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHalloClientStreming",
			Handler:       _Greet_SayHalloClientStreming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mine.proto",
}
